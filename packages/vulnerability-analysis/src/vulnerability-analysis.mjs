/* eslint-disable no-await-in-loop */
import sbom from "../input/sbom.json" assert {type: "json"};
import cweDictionary from "../input/cwe-map.json" assert {type: "json"};

import getCves from "./get-cves.mjs";
import formatSbomComponentList from "./format-cve-list.mjs";
import convertedComponents from "./purl-to-cpe.mjs";
import chunk from "lodash.chunk";

function delay(t) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, t);
  });
}

const {components} = sbom;

export default async function getVulnerabilityAnalysis(apiKey) {
  const cpeComponents = await convertedComponents(components);

  const noVulnerabilities = cpeComponents.filter(({cpe}) => !cpe);
  const vulnerabilitiesLookup = cpeComponents.filter(({cpe}) => !!cpe);
  const cpeBuckets = chunk(vulnerabilitiesLookup, 10);

  const sbomComponents = noVulnerabilities.map((component) =>
    formatSbomComponentList({...component, cves: []}),
  );

  for (const index in cpeBuckets) {
    const cveLookup = await Promise.all(
      cpeBuckets[index].map(async (component) => ({
        ...component,
        cves: await getCves(component.cpe, apiKey),
      })),
    );
    cveLookup.forEach((component) =>
      sbomComponents.push(formatSbomComponentList(component)),
    );
    await delay(7 * 1000);
  }

  const ouput = sbomComponents.map((component) => ({
    ...component,
    cves: component.cves.map((cve) => ({
      ...cve,
      cwes: cve.cwes.map(
        (id) => cweDictionary[id.split("-")[1]] ?? {name: id, memory: false},
      ),
    })),
  }));

  return ouput;
}
