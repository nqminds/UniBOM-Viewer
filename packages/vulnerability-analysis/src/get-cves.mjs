import fetch, {Request} from "node-fetch";

const baseUrl = new URL("https://services.nvd.nist.gov/rest/json/cves/2.0");

/**
 * @typedef {object} CVEItem
 * See https://csrc.nist.gov/schema/nvd/api/2.0/cve_api_json_2.0.schema
 * @property {string} lastModified - Date-string
 */

/**
 * @typedef {object} DefCVEItem
 * See https://csrc.nist.gov/schema/nvd/api/2.0/cve_api_json_2.0.schema
 * @property {CVEItem} cve - The CVE.
 */

/** @type {Map<string, {cves: Map<string, CVEItem>, lastModEndDate: string}>} Map of CPE to CVEs */
const cache = new Map();

// NIST forbids querying the same API more than once every two hours
const QUERY_OFFSET = 2 * 60 * 60 * 1000;

/**
 * Retrieves a list of all CVEs which are weaknesses for the given CPE.
 *
 * These CVEs are cached for each CPE, and this function will only request
 * newer CVEs every 2 hours to follow the NVD NIST database rules.
 *
 * @param {string} cpe - CPE v2.2 URI which is given from SBOM
 * @param {string} [apiKey] - API key which increases API rate limit
 * @returns {DefCVEItem[]} - List of CVEs
 */
export default async function getCves(cpe, apiKey) {
  const cpeCache = cache.get(cpe) ?? {
    cves: new Map(),
    lastModEndDate: null,
  };

  if (
    cpeCache.lastModEndDate === null ||
    cpeCache.lastModEndDate < new Date(Date.now() - QUERY_OFFSET).toISOString()
  ) {
    const lastModEndDate = new Date().toISOString();

    const queryParams = {
      // NIST API expects v2.3 CPEs, so need to convert from v2.2 CPEs
      // TODO: this seems a bit suspicious to me, is this conversion right?
      cpeName: cpe.replace("cpe:/", "cpe:2.3:"),
    };
    if (cpeCache.lastModEndDate) {
      queryParams.lastModStartDate = cpeCache.lastModEndDate;
      queryParams.lastModEndDate = lastModEndDate;
    }

    /** @type {import("node-fetch").HeadersInit} */
    const headers = {};
    if (apiKey) {
      headers.apiKey = apiKey;
    }
    const requestUrl = new URL(
      `${baseUrl}?${new URLSearchParams(queryParams)}`,
    );
    const response = await fetch(
      new Request(requestUrl, {
        headers,
      }),
    );

    if (response.status !== 200) {
      throw new Error(
        `GET ${requestUrl} for cpe=${cpe} failed due to HTTP ${response.status} ${response.statusText}.\n` +
          `Body was ${await response.text()}.`,
      );
    }

    const data = await response.json();

    for (const {/** @type {CVEItem}*/ cve} of data.vulnerabilities) {
      cpeCache.cves.set(cve.id, cve);
    }
    cpeCache.lastModEndDate = lastModEndDate;

    cache.set(cpe, cpeCache);
  }

  return Array.from(
    cpeCache.cves.values(),
    (cve) => /** @type {DefCVEItem} */ ({cve}),
  );
}
