/* eslint-disable no-async-promise-executor */
import sqlite3 from "sqlite3";
// TODO: upgrade to bettersqlite3
import path from "path";
import {fileURLToPath} from "node:url";

const __filename = fileURLToPath(import.meta.url);

const __dirname = path.dirname(__filename);

export default async function convertPurlToCpe(sbomComponents) {
  // If one Purl component exists, convert all
  const componentsToConvert = sbomComponents.find(
    ({purl, cpe}) => !!purl && !cpe,
  );
  if (componentsToConvert) {
    try {
      const db = new sqlite3.Database(
        path.join(__dirname, "../input/purl2cpe.db"),
      );
      const convertedComponents = await Promise.all(
        sbomComponents.map(async (compnent) => {
          return new Promise(async (resolve) => {
            const {purl, cpe} = compnent;
            if (!!purl && !cpe) {
              const componentCpe = await getCpes(db, purl);
              resolve({...compnent, cpe: componentCpe});
            } else {
              resolve(compnent);
            }
          });
        }),
      );
      db.close();
      return convertedComponents;
    } catch (error) {
      // TODO: update docs
      throw new Error(
        `Failed to open ${path}. ` +
          "Have you downloaded the database (or run some setup code in the README.md)?",
        {cause: error},
      );
    }
  }
  return sbomComponents;
}

function getCpes(db, purl) {
  return new Promise((resolve, reject) => {
    const [pkg, version] = purl.split("@");
    const sql = `SELECT DISTINCT cpe from purl2cpe where purl='${pkg}' and cpe like '%${version}%'`;
    db.all(sql, [], (err, rows) => {
      if (err) {
        reject(err.message);
      }
      if (rows.length) {
        resolve(rows[0].cpe);
      }
      resolve(null);
    });
  });
}
