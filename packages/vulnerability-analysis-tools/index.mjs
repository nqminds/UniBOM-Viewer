#!/usr/bin/env node
/* eslint-disable no-console */

import { getCpes } from "./src/get-syft-cpes.mjs";
import { fetchCVEsWithRateLimit } from "./src/list-vulnerabilities.mjs";
import { fetchCVEsForCPE } from "./src/list-vulnerabilities.mjs";
import { writeCvesToFile } from "./src/list-vulnerabilities.mjs";
import { fetchHistoricalCPEs } from "./src/get-historical-cpes.mjs";
import { fetchHistoricalCVEs } from "./src/get-historical-cves.mjs";
import { getCweInfo } from "./src/get-CWEs-info.mjs";
import { getVulnerabilities } from "./src/get-grype-vulnerabilities.mjs";
import { generateVulnerabilityReport } from "./src/generate_sbom.mjs";
import { generateConanFile } from "./src/generate-conan-text-from-json.mjs";
import { generateDependencyList } from "./src/generate-dep-list.mjs";
import { mapCPEs } from "./src/get-cpes-from-dependecy.mjs";
import { generateDummySBOM } from "./src/gen-bom-from-cpes.mjs";
import { getGHSAInfo } from "./src/get-git-ghsas.mjs";
import { processVulnerabilities } from "./src/get-git-ghsas.mjs";

async function main() {
  function displayHelp() {
    console.log(`

    Usage:
    nqmvul [argument] [filePath]
    nqmvul [argument] [text]
    nqmvul [argument] [filePath] [text]
    nqmvul [argument] [filePath] [filePath] [text] [filePath]
    nqmvul [argument] [text] [text]

    Arguments:
    -getCPEs                Path to SBOM.json file
    -listCPEs               Path to SBOM.json file
    -getCVEs                CPE2.3 format e.g. "cpe:2.3:a:busybox:busybox:1.33.2"
    -writeCVEs              Path to SBOM.json file
    -getHistoricalCpes      CPE2.3 format e.g. "cpe:2.3:a:busybox:busybox:1.33.2"
    -getHistoricalCves      Supported CVE format: "CVE-2022-48174"
    -getCweInfo             CWEs separated by commas, without white space. e.g. 'CWE-476,CWE-681'
    -listVulnerabilities    Absolute path to grype vulnerability report file
    -generateSbom           Absoluth path to project and a project name
    -generateConan          Project Name. Please ensure the dependencies exist for /input/ccsDependencies/<project_name>_dependencies
    -genDep                 ccScannerPath cppDierectory projectName Python_Environment_Path as path/to/env/bin or N/A if environment not needed
    -mapCpes                Project Name. Please ensure that input/conan-files/<projec_name>/conanfile.txt exists
    -dummySbom              Project Name, SBOM format (json or xml)
    -getGhsa                GHSA Vulnerability, e.g. GHSA-j8xg-fqg3-53r7
    -extractGhsas           Absolute path to grype vulnerability report file
    `);
  }

  const args = process.argv.slice(2);

  if (args.length === 0) {
    console.error("Please provide a valid flag.");
    process.exit(1);
  }

  try {
    switch (args[0]) {
      case "-help":
        displayHelp();
        break;
      case "-getCPEs":
        if (args[1]) {
          const cpes = await getCpes(args[1]);
          console.log(cpes);
        } else {
          console.error("Please provide a valid path to SBOM.");
        }
        break;
      case "-listCPEs":
        if (args[1]) {
          console.log("Fetching cpe info from API ... ");
          const detailedCpes = await fetchCVEsWithRateLimit(args[1]);
          console.log(detailedCpes);
        } else {
          console.error("Please provide a valid path to SBOM.");
        }
        break;
      case "-getCVEs":
        if (args[1]) {
          console.log("Fetching CVEs from API for: ", args[1]);
          const cves = await fetchCVEsForCPE(args[1]);
          console.log(cves);
        } else {
          console.error("Please provide a valid CPE.");
        }
        break;
      case "-writeCVEs":
        if (args[1]) {
          console.log("Writing CVE data to /input/cveData.json");
          await writeCvesToFile(args[1]);
          console.log("Writing file completed");
        } else {
          console.error("Please provide a valid path to SBOM.");
        }
        break;
      case "-getHistoricalCpes":
        if (args[1]) {
          console.log("Fetching historical CPEs from API");
          const histCPEs = await fetchHistoricalCPEs(args[1]);
          console.log(histCPEs);
        } else {
          console.error(
            "Plese provide a valid CPE in format 2.3 e.g. 'cpe:2.3:a:busybox:busybox:1.33.2'"
          );
        }
        break;
      case "-getHistoricalCves":
        if (args[1]) {
          console.log("Fetching historical CVEs from API");
          const histCVEs = await fetchHistoricalCVEs(args[1]);
          console.log(histCVEs);
        } else {
          console.error("Please provide a valid CVE type. e.g. CVE-2022-48174");
        }
        break;
      case "-getCweInfo":
        if (args[1]) {
          const cwesArray = args[1].split(",");
          const cweInfo = getCweInfo(cwesArray);
          console.log(cweInfo);
        } else {
          console.error(
            "Please provide a valid list of CWEs separated by commas, without white space. e.g. 'CWE-476,CWE-681'"
          );
        }
        break;
      case "-listVulnerabilities":
        if (args[1]) {
          console.log("Creating vulnerability report");
          const report = await getVulnerabilities(args[1]);
          console.log(report);
        } else {
          console.error(
            "Please provide a valid absolute path to grype vulnerability report file."
          );
        }
        break;
      case "-generateSbom":
        if (args[2]) {
          await generateVulnerabilityReport(args[1], args[2]);
        } else {
          console.log(
            "Please ensure the path is correct and provide project name e.g: -generateSbom <project_path> <project_name>"
          );
        }
        break;
      case "-generateConan":
        if (args[1]) {
          try {
            console.log(
              `Writing conan file for ../input/ccsDependencies/${args[1]}_dependencies to ../input/conan-files/${args[1]}`
            );
            await generateConanFile(args[1]);
            console.log("Writing completed");
          } catch (error) {
            console.error(
              `Please ensure the dependencies exist for ./input/ccsDependencies/${args[1]}_dependencies \n ${error}`
            );
          }
        }
        break;
      case "-genDep":
        if (args[4]) {
          try {
            console.log(`Trying to generate dependency list for ${args[3]}`);
            generateDependencyList(args[1], args[2], args[3], args[4]);
          } catch (error) {
            console.error(
              `Please ensure that all the paths are correct ${error}`
            );
          }
        } else {
          console.log(
            "Please ensure that you added all the necessary paths and project_name"
          );
        }
        break;
      case "-mapCpes":
        if (args[1]) {
          let spinner;
          try {
            console.log("Trying to map CPEs, this may take a while...");
            const spinnerChars = ["|", "/", "-", "\\"];
            let spinnerIndex = 0;
            spinner = setInterval(() => {
              process.stdout.write(
                `\r${spinnerChars[spinnerIndex]}  Mapping...`
              );
              spinnerIndex = (spinnerIndex + 1) % spinnerChars.length;
            }, 250);

            await mapCPEs(args[1]);

            clearInterval(spinner);
            process.stdout.write("\r");
            console.log(
              "Mapping completed. Please see the generated file in input/cpes/cpeMapping.json"
            );
          } catch (error) {
            clearInterval(spinner);
            process.stdout.write("\r");
            console.error(`Error encountered processing the command: ${error}`);
          }
        } else {
          console.error(
            `Please ensure that input/cpe_data.csv is available and input/conan-files/${args[1]}/conanfile.txt exists`
          );
        }
        break;
      case "-dummySbom":
        if (args[2] === "json" || args[2] === "xml") {
          let spinner;
          try {
            console.log(
              `Trying to create SBMO for ${args[1]}, this may take a while...`
            );
            const spinnerChars = ["|", "/", "-", "\\"];
            let spinnerIndex = 0;
            spinner = setInterval(() => {
              process.stdout.write(
                `\r${spinnerChars[spinnerIndex]}  Generating SBOM...`
              );
              spinnerIndex = (spinnerIndex + 1) % spinnerChars.length;
            }, 250);

            await generateDummySBOM(args[1], args[2]);

            clearInterval(spinner);
            process.stdout.write("\r");
            console.log(
              `SBOM completed. Please see the generated file in input/sboms/${args[1]}_sbom.${args[2]}`
            );
          } catch (error) {
            console.error(`
                  Please ensure that /input/conan-files/${args[1]}/conanfile.txt and /input/cpe_data.csv exists before running the command
                  Error encountered processing the command: ${error}`);
          }
        } else {
          console.error(`
                Please provide a project name and a valid format. Only json and xml are permited
                Please ensure that /input/conan-files/${args[1]}/conanfile.txt and /input/cpe_data.csv exists before running the command
                `);
        }
        break;
      case "-getGhsa":
        if (args[1] && args[1].startsWith("GHSA-")) {
          try {
            const data = await getGHSAInfo(args[1]);
            console.log(data);
          } catch (error) {
            console.error(`Error encountered processing the command: ${error}`);
          }
        } else {
          console.error(
            "Please enter a valid GHSA code. e.g GHSA-j8xg-fqg3-53r7"
          );
        }
        break;
      case "-extractGhsas":
        if (args[1]) {
          try {
            const ghsas = await processVulnerabilities(args[1]);
            console.log(ghsas);
          } catch (error) {
            console.error(`Error encountered processing the command: ${error}`);
          }
        } else {
          console.log(
            "Please provide a valid absolute path to grype vulnerability report file."
          );
        }
        break;

      default:
        console.error(`Unknown flag: ${args[0]}`);
        break;
    }
  } catch (error) {
    console.error(`Error: ${error.message}`);
    process.exit(1);
  }
}

main()
  .then(() => {
    process.exit(0);
  }) // gracefully handle any potential errors
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
