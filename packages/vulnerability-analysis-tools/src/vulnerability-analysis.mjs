/* eslint-disable no-console */
// eslint-disable-next-line no-unused-vars
import { cleanCpe } from "./get-syft-cpes.mjs";
import { fetchCVEsForCPE } from "./list-vulnerabilities.mjs";
import { getCweInfo } from "./get-CWEs-info.mjs";
import { classifyCwe } from "./classify_cwe.mjs";
import { fileURLToPath } from "url";
import fs from "fs";
import path from "node:path";
import { dirname } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * Feeds the app with sbom data
 *
 * @param {string|object} sbomInput - Path to the SBOM JSON file or json data
 * @returns {object} - sbom data
 */
export async function extractDetails(sbomInput) {
  let sbomJson;
  let resolvedPath;

  // check if the input is a string (path) or an object (data)
  if (typeof sbomInput === "string") {
    resolvedPath = sbomInput;
    if (!fs.existsSync(resolvedPath)) {
      // if path doesn't exist, use relative to __dirname
      resolvedPath = path.resolve(__dirname, sbomInput);
    }

    // re-check if the path exists
    if (!fs.existsSync(resolvedPath)) {
      throw new Error(`File not found at ${resolvedPath}`);
    }
    const sbomData = fs.readFileSync(resolvedPath);
    sbomJson = JSON.parse(sbomData);
  } else if (typeof sbomInput === "object" && sbomInput !== null) {
    sbomJson = sbomInput;
  } else {
    throw new Error(
      "Invalid input. Please provide either a path to an SBOM file or the SBOM data itself."
    );
  }
  // Map components to an array of promises
  const resultsPromises = sbomJson.components.map(async (component) => {
    const cpe = await cleanCpe(component.cpe);
    const name = component.name;
    const version = component.version;
    const licenses = component.licenses
      ? component.licenses.map((lic) => lic.license.name)
      : [];

    let cves = [];
    const fetchedCves = await fetchCVEsForCPE(cpe);

    if (fetchedCves && Array.isArray(fetchedCves)) {
      // Filter out null values
      cves = fetchedCves.filter(Boolean);
      // Add CWE info
      cves = await Promise.all(
        cves.map(async (cve) => {
          const { weakness } = cve;
          if (weakness && Array.isArray(weakness)) {
            const cwePromises = weakness.map(async (cweId) => {
              try {
                const cweInfos = await getCweInfo(cweId);
                let CweName = cweId;
                let memoryCwe = false;

                // Check if cweInfos is defined and not empty
                if (
                  cweInfos &&
                  Array.isArray(cweInfos) &&
                  cweInfos.length > 0
                ) {
                  // Get the first object if it's an array
                  const firstCweInfo = Array.isArray(cweInfos)
                    ? cweInfos[0]
                    : cweInfos;
                  CweName = firstCweInfo.Name;

                  const cweType = await classifyCwe(cweId);
                  memoryCwe = cweType !== "not-memory-related";
                } else {
                  console.error(`No data returned for CWE ${cweId}`);
                }

                return {
                  name: CweName,
                  memoryCwe: memoryCwe,
                };
              } catch (error) {
                // TODO: decide on how we handle errors
                // eslint-disable-next-line no-console
                throw new Error(`Error processing CWE ${cweId}:`, error);
              }
            });

            const cwes = await Promise.all(cwePromises);
            return {
              ...cve,
              cwes,
            };
          }
          return cve;
        })
      );
    }
    return cves && cves.length > 0
      ? {
          name,
          version,
          licenses,
          cves: cves.filter(Boolean),
        }
      : null;
  });

  // Await all promises in parallel and return the results
  const results = (await Promise.all(resultsPromises)).filter(Boolean);
  return results;
}
// For debugging
// eslint-disable-next-line no-unused-vars
// const tst = await extractDetails('/home/ionut/Repositories/cyber/packages/vulnerability-analysis-tools/input/sbom.json');

// await extractDetailsAndFetchCVEs('/home/ionut/Repositories/cyber/packages/vulnerability-analysis-tools/input/sbom.json');

// eslint-disable-next-line no-console
// console.log(JSON.stringify(tst, undefined, 4));
