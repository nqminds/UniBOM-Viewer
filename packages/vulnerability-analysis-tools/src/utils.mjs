import fs from "fs";
import csvParser from "csv-parser";

/**
 * Mapps dependencies to cpes
 *
 *@param {string} filePath - csvFilepath
 *@param {string []} dependencies - dependencies
 */
export async function createCPEMapping(filePath, dependencies) {
  const cpeMapping = {};
  dependencies.forEach((dep) => (cpeMapping[dep] = []));

  return new Promise((resolve, reject) => {
    // use read stream to reduce memory usage.
    fs.createReadStream(filePath)
      .pipe(csvParser())
      .on("data", (row) => {
        const cpeName = row.cpe_name;
        dependencies.forEach((dep) => {
          let searchDep = dep;
          let version = "";

          // If dependency has a version, format it
          if (dep.includes("/")) {
            [searchDep, version] = dep.split("/");
            searchDep = searchDep.replace("/", ":");
            version = `:${version}`;
          }

          const regex = new RegExp(`\\b${searchDep}${version}\\b`, "i");

          if (cpeName && regex.test(cpeName)) {
            cpeMapping[dep].push(cpeName);
          }
        });
      })
      .on("end", () => resolve(cpeMapping))
      .on("error", (error) => reject(error));
  });
}
