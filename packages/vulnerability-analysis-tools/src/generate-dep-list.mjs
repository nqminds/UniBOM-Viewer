/* eslint-disable no-console */
import { fileURLToPath } from "url";
import path from "node:path";
import { dirname } from "path";
import { execFileSync } from "child_process";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * Generate a dependency report based on the provided c/cpp directory.
 *
 * @example
 * const ccScannerPath = "~/path/to/ccscanner/ccscanner"
 * const cppDierectory = "~/path/to/cpp_repository"
 * const projectName = "repository_name"
 * const envPath = "~/path/to/python_evironment/bin"
 *
 * generateDependencyList(ccScannerPath, cppDierectory, projectName, envPath)
 *
 * @param {string} ccScannerPath - Absolute path to the CCScanner tool.
 * @param {string} cppDierectory - Absolute path to directory to be scanned.
 * @param {string} projectName - Name of your project
 * @param {string} envPath - Absolute path to python env if needed, eg. absolute/path/to/env/bin , else enter N/A
 */
export function generateDependencyList(
  ccScannerPath,
  cppDierectory,
  projectName,
  envPath
) {
  const dependenciesFilePath = path.resolve(
    __dirname,
    "../input/ccsDependencies"
  );

  if (envPath !== "N/A") {
    const envCommand = `
      source ${envPath}/activate
      python3 ${ccScannerPath}/scanner.py -d ${cppDierectory} -t ${dependenciesFilePath}/${projectName}_dependencies
      `;

    try {
      execFileSync("bash", ["-c", envCommand]);

      console.log(
        "python environment activated and dependency scanning completed."
      );
      console.log(
        `dependency list saved to ${dependenciesFilePath}/${projectName}_dependencies`
      );
    } catch (error) {
      throw new Error(
        `Error error activating python environment at ${envPath}:`,
        error
      );
    }
  } else {
    const ccsArgs = [
      `${ccScannerPath}/scanner.py`,
      `-d`,
      `${cppDierectory}`,
      `-t`,
      `${dependenciesFilePath}/${projectName}_dependencies`,
    ];

    try {
      execFileSync("python3", ccsArgs);

      console.log("dependency scanning completed.");
      console.log(
        `dependency list saved to ${dependenciesFilePath}/${projectName}_dependencies`
      );
    } catch (error) {
      throw new Error(`Error error scanning directory ${envPath}:`, error);
    }
  }
}
