import fs from "fs";
import readline from "readline";
import { fileURLToPath } from "url";
import path from "node:path";
import { dirname } from "path";
import { create } from "xmlbuilder2";
import { createCPEMapping } from "./utils.mjs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// create a dummy SBOM file
function createCycloneDxSBOM(cpeMapping) {
  const bom = create({ version: "1.0" })
    .ele("bom", { xmlns: "http://cyclonedx.org/schema/bom/1.2", version: "1" })
    .ele("components");

  Object.keys(cpeMapping).forEach((dep) => {
    const cpeNames = cpeMapping[dep];
    cpeNames.forEach((cpe) => {
      const parts = cpe.split(":");
      const version = parts[4];
      bom
        .ele("component", { type: "library" })
        .ele("name")
        .txt(dep)
        .up()
        .ele("version")
        .txt(version)
        .up()
        .ele("cpe")
        .txt(cpe)
        .up();
    });
  });

  return bom.end({ prettyPrint: true });
}

/**
 * Returns a bom from a list of dependencies
 *
 * @param {string} conanfilePath - path to conanfile.txt
 * @param {string} projectName - name of your project
 */
export async function processDependencies(conanfilePath, projectName) {
  const csvFilePath = path.resolve(__dirname, "../input/cpe_data.csv");
  // the file can become quite large so use ReadStream to reduce memory usage
  const fileStream = fs.createReadStream(conanfilePath);
  const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity,
  });

  const dependencies = [];
  let isRequiresSection = false;

  for await (const line of rl) {
    if (line.startsWith("[requires]")) {
      isRequiresSection = true;
    } else if (line.startsWith("[")) {
      isRequiresSection = false;
    } else if (isRequiresSection) {
      let dependency = line.replace("/", ":");
      dependency = dependency.replace(/'/g, "");
      if (dependency) {
        // check that the string is not empty after trimming
        dependencies.push(dependency);
      }
    }
  }
  // after writing the CPE mapping to a file
  const cpeMapping = await createCPEMapping(csvFilePath, dependencies);
  const cycloneDxSBOM = createCycloneDxSBOM(cpeMapping);
  const dirPath = path.resolve(__dirname, `../input/cpes/${projectName}`);
  const sbomFilePath = path.join(dirPath, "bom.xml");
  try {
    fs.writeFileSync(sbomFilePath, cycloneDxSBOM);
  } catch (error) {
    throw new Error(`Error trying writing CycloneDX SBOM file: ${error}`);
  }
}
