import fs from "fs";
import { fileURLToPath } from "url";
import path from "node:path";
import { dirname } from "path";

// read the JSON file and parsing the data
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * function to convert json objects to conan dependencies
 *
 * @example
 * run generateDependencyList(ccScannerPath, path/to/edgesec/repository, edgesec, envPath)
 * then
 * generateConanFile(edgesec) // make sure edgesec_dependencies exists in input/cssDependencies/
 *
 *@param {string} projectName - Projecs Name
 */
export function generateConanFile(projectName) {
  const addedDeps = new Set();
  const generators = new Set();

  try {
    const ccsFilePath = path.resolve(
      __dirname,
      "../input/ccsDependencies/",
      `${projectName}_dependencies`
    );
    const conanFileDir = path.resolve(
      __dirname,
      "../input/conan-files/",
      projectName
    );
    fs.mkdirSync(conanFileDir, { recursive: true }); // create the directory if it does not exist
    const conanFilePath = path.resolve(conanFileDir, "conanfile.txt");

    const jsonData = JSON.parse(fs.readFileSync(ccsFilePath, "utf-8"));
    // write the conanfile.txt
    const file = fs.createWriteStream(conanFilePath);
    file.write("[requires]\n");

    // looping through extractors and dependencies
    jsonData.extractors.forEach((extractor) => {
      extractor.deps.forEach((dep) => {
        const depString = dep.version
          ? `${dep.depname}/${dep.version}`
          : dep.depname;
        const generatorsString = `${dep.extractor_type}`;

        // if the dependency/generator is not in the set, add it to the set and write to file
        if (!addedDeps.has(depString)) {
          addedDeps.add(depString);
          file.write(`${depString}\n`);
        }
        if (!generators.has(generatorsString)) {
          generators.add(generatorsString);
        }
      });
    });

    file.write("\n[generators]\n");
    generators.forEach((generator) => {
      file.write(`${generator}\n`);
    });

    file.end();
  } catch (error) {
    throw new Error(
      `Error trying to generate conanfile for the project ${projectName}: ${error}`
    );
  }
}
